<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>C &amp; S</title>
  
  <subtitle>An apple a day keeps the doctor away :)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-06T04:04:48.317Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cancan Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Journal Club: Quantum convolutional neural networks</title>
    <link href="http://yoursite.com/2019/09/04/Journal-club-20190904/"/>
    <id>http://yoursite.com/2019/09/04/Journal-club-20190904/</id>
    <published>2019-09-04T17:08:32.000Z</published>
    <updated>2019-09-06T04:04:48.317Z</updated>
    
    <content type="html"><![CDATA[<p>This <a href="https://doi.org/10.1038/s41567-019-0648-8" target="_blank" rel="noopener">paper</a> is published on August 26th, 2019 on <em>Nature Physics</em> by <a href="http://lukin.physics.harvard.edu/" target="_blank" rel="noopener">Professor Lukin’s Group</a> at Harvard University. The first author is <a href="https://scholar.google.co.uk/citations?user=Zk3TRxYAAAAJ&hl=en&oi=ao" target="_blank" rel="noopener">Iris Cong</a>, a third-year graduate student. Here are a <a href="(http://www.cchem.berkeley.edu/bqic/slides/qcnn_berkeley_oct18_share.pdf)">talk slides</a> and <a href="https://www.youtube.com/watch?v=ytX6Vfo8WAk" target="_blank" rel="noopener">video</a> from the author introducing this topic and the <a href="https://arxiv.org/pdf/1810.03787.pdf" target="_blank" rel="noopener">arxiv link</a>. </p><a id="more"></a><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Machine Learning has achieved great success in solving classicaly difficult problems. Quantum system containng many-body interactions are extremely large complexity.<br>However, directly applying classical neural network requires performing exponentially difficult quantum state or process tomography. Thus, it would be much more beneficial if we could use quantum states or processes as inputs.</p><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>Similar to the CNN model, QCNN is constructed below. Input ($\rho_{in}$) is an unknown quantum state. A convolution layer applies a single quasilocal unitary ($U_{i}$) and a fraction of qubits are measured acting as pooling layer. The measurment outcome determine unitary rotation ($V_{j}$) applied to nearby qubits. After convolutional layers, a fully connected layer is applied as a unitary $F$ on the remaining qubits. Finally, the outcome of the circuit is obtained by measuring a fixed number of output qubits. The unitaries here are weights to be optimized in classical CNN during learning process.<br><img src="./qcnn_architecture.PNG" alt><br>For a simple system with binary outputs, the mean squared error is calculated as,<br>$$MSE = \frac{1}{2M}\sum_{\alpha=1}^{M}(y_i-f_{U_i, V_j, F}(|\Psi_\alpha\rangle))^2$$<br>The paper also compares QCNN with the multiscale entanglement renormalization ansatz(MERA) and QEC. I don’t fully understand these parts. Simply speaking, QCNN is like a reverse version of MERA combined with QEC as pooling layers. Please read the paper if you are interested.</p><h2 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h2><h3 id="1-Quantum-phase-recognition"><a href="#1-Quantum-phase-recognition" class="headerlink" title="1. Quantum phase recognition"></a>1. Quantum phase recognition</h3><p>The system investigate in the paper is a $Z_2 \times Z_2$ symmetry-protected topological (SPT) phase $\cal {P}$ described by<br>$$H = -J\sum_{i=1}^{N-2}Z_iX_{i+1}Z_{i+2} - h_1\sum_{i=1}^NX_i - h_2\sum_{i=1}^{N-1}X_iX_{i+1}$$<br>Below Fig. a is the phase diagram and Fig. b is the analytical QCNN circuit that they use to recognize $\cal{P}$<br><img src="./application_1.png" alt><br>The training data points are 40 equally spaced points $h_1 \in [0,2]$ along the line $h_2=-0$. The blue and red diamonds are phase boundary points extracted from infinite-size DMRG numerical simulations, while the background shading represents the expectation value of QCNN output. In the QCNN learning procedure, the derivative of the MSE to the first order is calculated with respect to the parameters using the finite-difference method.(See paper method part for detail)</p><p>The output is shown below. It shows that the QCNN can accurately reproduce the two-dimensional phase diagram over the entire parameter regime, while only trained on samples from a set of solvable points that do not even cross the lower phase boundary.</p><p><em>I have one question here: does this mean that the QCNN have learned how to solve the hamiltonian for the whole space? As it can show the phase transition that it is not trained upon.</em><br><img src="./application_1_output.png" alt></p><h3 id="2-Quantum-error-correction-QEC-optimization"><a href="#2-Quantum-error-correction-QEC-optimization" class="headerlink" title="2. Quantum error correction (QEC) optimization"></a>2. Quantum error correction (QEC) optimization</h3><h2 id="Outlook"><a href="#Outlook" class="headerlink" title="Outlook"></a>Outlook</h2><p>This paper indicates that QCNNs are promising for its application in qunatum machine learning field. Further extensions could incorporate optimizations for fault-tolerant operations on QEC code spaces. </p><p>As I am not familar with quantum computer part, I still quite confuse how they develop their systems. Also the optimization method in the QCNN is not backpropagation we generally use in classical CNN. </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This &lt;a href=&quot;https://doi.org/10.1038/s41567-019-0648-8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;paper&lt;/a&gt; is published on August 26th, 2019 on &lt;em&gt;Nature Physics&lt;/em&gt; by &lt;a href=&quot;http://lukin.physics.harvard.edu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Professor Lukin’s Group&lt;/a&gt; at Harvard University. The first author is &lt;a href=&quot;https://scholar.google.co.uk/citations?user=Zk3TRxYAAAAJ&amp;hl=en&amp;oi=ao&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Iris Cong&lt;/a&gt;, a third-year graduate student. Here are a &lt;a href=&quot;(http://www.cchem.berkeley.edu/bqic/slides/qcnn_berkeley_oct18_share.pdf)&quot;&gt;talk slides&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=ytX6Vfo8WAk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;video&lt;/a&gt; from the author introducing this topic and the &lt;a href=&quot;https://arxiv.org/pdf/1810.03787.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;arxiv link&lt;/a&gt;. &lt;/p&gt;
    
    </summary>
    
    
      <category term="Journal Club" scheme="http://yoursite.com/tags/Journal-Club/"/>
    
  </entry>
  
  <entry>
    <title>Sync Settings of Sublime Text 3</title>
    <link href="http://yoursite.com/2019/09/02/ST3/"/>
    <id>http://yoursite.com/2019/09/02/ST3/</id>
    <published>2019-09-02T16:55:24.000Z</published>
    <updated>2019-09-03T00:45:22.638Z</updated>
    
    <content type="html"><![CDATA[<p>For those people using Sublime Text 3, it may feel more convenient to synchronize their own Sublime Text 3 setting across different computers. This can be realized through a plugin called <a href="https://packagecontrol.io/packages/Sync%20Settings" target="_blank" rel="noopener"><code>Sync Setting</code></a> on Sublime Text 3.</p><a id="more"></a><p>The content of this article is mainly based upon <a href="https://zhuanlan.zhihu.com/p/31192452" target="_blank" rel="noopener">this link</a>.</p><ul><li><p><code>Ctrl + Shift + P</code> open package control in ST3, and enter <code>install</code>, choose <code>Package Control: Install Package</code></p></li><li><p>Enter <code>Sync Settings</code>, choose the corresponding one. </p></li><li><p><a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener">Generate a new personal Github token</a>. Make sure you choose <code>gist</code> term, and click <code>Generate toker</code>.</p></li><li><p>Copy your token and paste it to <code>Preference &gt; Packages Settings &gt; Sync Settings &gt; Settings - User</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;access_token&quot;: &quot;&lt;your-token&gt;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Preference &gt; Packages Settings &gt; Sync Settings &gt; Sync Settings: Create and Upload</code> and enter your description.</p></li><li><p>Open the user setting file and copy <code>access_token</code> and <code>gist_id</code>.</p></li><li><p>On the computer you need to install settings, install <code>Sync Settings</code> and paste <code>access_token</code> and <code>gist_id</code>. </p></li><li><p><code>Preference &gt; Packages Settings &gt; Sync Settings &gt; Sync Settings: Download</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;For those people using Sublime Text 3, it may feel more convenient to synchronize their own Sublime Text 3 setting across different computers. This can be realized through a plugin called &lt;a href=&quot;https://packagecontrol.io/packages/Sync%20Settings&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Sync Setting&lt;/code&gt;&lt;/a&gt; on Sublime Text 3.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Instructions of some software installation on CCV Cluster</title>
    <link href="http://yoursite.com/2019/08/30/CCV_softwares/"/>
    <id>http://yoursite.com/2019/08/30/CCV_softwares/</id>
    <published>2019-08-30T21:55:25.000Z</published>
    <updated>2019-09-04T18:47:56.428Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ccv.brown.edu" target="_blank" rel="noopener">CCV</a> is the Center for Computataion &amp; Visualization at Brown University. <a href="https://docs.ccv.brown.edu/oscar/" target="_blank" rel="noopener">Oscar</a> is Brown University’s supercomputer. In this article, I will summarize several software installation procedures on CCV in case there are not corresponding modules or not the latest version you want.</p><a id="more"></a><h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>I recommend you install everything in your <code>data</code> directory as it has large quota compared with <code>home</code> and stores forever compared with <code>scratch</code>. Tip: you can use <code>touch</code> command to change time stamp of your files in <code>scratch</code> to avoid being deleted. But I only recommend do this to your calculation files but not software source codes.</p><h2 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h2><p>Anaconda is an excellent python management tool. It can also help you out to organize your python packages in different virtual environments, which is greatly helpful. </p><ol><li><p>Download <a href="https://www.anaconda.com/distribution/" target="_blank" rel="noopener">Anaconda</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></li><li><p>Begin Installation </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash ~/Downloads/Anaconda3-2019.07-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></li><li><p>You could accept the default installation settings of the package. However, you may need to specify the installation location of anaconda. I recommend enter the folder in your <code>data</code> directory.</p></li><li><p>If you agree <code>conda init</code>, you bash shell python path will automatically be anaconda. If you want to use python2, just reload python2 module will help you out. </p></li></ol><h2 id="PySCF"><a href="#PySCF" class="headerlink" title="PySCF"></a>PySCF</h2><p>I personally recommend install PySCF with conda environment, you could also create your own virtual environment for pyscf package to help yourself manage different version of python.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c pyscf pyscf</span><br></pre></td></tr></table></figure><p>However, above installation will introduce an error when running <code>import pyscf</code> in a python REPL. It will complain that libcint 3.0.12 cannot be found. Because by default, libcint 3.0.17 is installed. This can be fix by</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c pyscf libcint=3.0.12</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ccv.brown.edu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CCV&lt;/a&gt; is the Center for Computataion &amp;amp; Visualization at Brown University. &lt;a href=&quot;https://docs.ccv.brown.edu/oscar/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Oscar&lt;/a&gt; is Brown University’s supercomputer. In this article, I will summarize several software installation procedures on CCV in case there are not corresponding modules or not the latest version you want.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Creating Your Own Blog with Github and Hexo</title>
    <link href="http://yoursite.com/2019/08/30/hello-world/"/>
    <id>http://yoursite.com/2019/08/30/hello-world/</id>
    <published>2019-08-30T20:48:00.000Z</published>
    <updated>2019-09-06T03:58:57.200Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my first blog! It took me a while to struggle through the setting process of my blog. Thus, I want to share my experience here to help people with same wish creating their own blog with github pages and hexo. </p><a id="more"></a><p>There are already many excellent tutorials about the subject. </p><p>For people want step by step tutorial, you could review following two ariticles,</p><ul><li><a href="https://neveryu.github.io/2016/09/03/hexo-next-one/" target="_blank" rel="noopener">Hexo-NexT搭建个人博客</a></li><li><a href="http://www.zhangblog.com/2019/06/11/hexo01/" target="_blank" rel="noopener">Linux下使用github+hexo搭建个人博客</a></li></ul><p>However, for the plugins or the modification to your theme, I strongly recommend you can view the really detailed documents, <a href="https://hexo-guide.readthedocs.io/zh_CN/latest/index.html#" target="_blank" rel="noopener">hexo NexT theme tutorial</a>.</p><p>The following content are some important things I need to remind myself of.</p><h2 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><p>Download <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node.js</a> and <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a> first. I personally recommend the LTS version of node.js.</p><p>If you already meet above requirements, you just need using <code>npm</code> to complete <code>Hexo</code> installation.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>After install hexo, we need to initialize a specific diretory for our blog. Move your working directory to your blog directory,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h2 id="Hexo-common-command"><a href="#Hexo-common-command" class="headerlink" title="Hexo common command"></a>Hexo common command</h2><p>I will only include several common command we use here and if you are interested in learning more, please go to the official website <a href="https://hexo.io/docs/commands" target="_blank" rel="noopener">here</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new &lt;postname&gt; <span class="comment"># create new article, </span></span><br><span class="line">hexo g <span class="comment"># generate static files</span></span><br><span class="line">hexo s <span class="comment"># local host, default is http://localhost:4000/</span></span><br><span class="line">hexo d <span class="comment"># deploy your website</span></span><br><span class="line">hexo c <span class="comment"># clean temporary files such as db.json and public files</span></span><br></pre></td></tr></table></figure><h2 id="Sync-your-blog-across-multiple-computers"><a href="#Sync-your-blog-across-multiple-computers" class="headerlink" title="Sync your blog across multiple computers"></a>Sync your blog across multiple computers</h2><p>More or less, we may need to manage our blog on different computers, such as on home computer or on your laptop. Then we cannot avoid to meet such a problem: how could we sync our blog?</p><p>This have puzzled me for a lot. At first, I saw people online suggesting creating multiple branches for backing up hexo source files in one repository. </p><ul><li>hexo branch: for Hexo source files</li><li>master branch: for blog source files generated by hexo</li></ul><p>However, this may expose to some secret keys to the public causing some problems if you add third-party plugins in your blogs. Until now, the best way I have ever read is to create two separate repositories, one private for Hexo and one public for blog.  </p><p>Details can be found at <a href="https://ricky.moe/2017/01/13/hexo-perfect-synchronize/" target="_blank" rel="noopener">hexo-perfect-synchronize</a> and <a href="https://segmentfault.com/a/1190000017784822" target="_blank" rel="noopener">segmentfault.com</a>. </p><ol><li>Simply speaking, if you already finished your hexo installation and can deploy your blog to github, you can follow steps below.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># make sure you are in your hexo root directory, delete third-party plugins git files</span></span><br><span class="line">rm -rf ./themes/next/.git/</span><br><span class="line"><span class="comment"># establish local git repository</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><ol start="2"><li>create a .gitignore file and put it under hexo root directory. This file may already exists, just check the content whether is same as below,</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><ol start="3"><li>you can push your hexo source files to the github repository you have already created. </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/&lt;username&gt;/&lt;repo-name&gt;.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'my first private hexo'</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ol start="4"><li>On the other computer, </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repo-link&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;git-directory&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ol start="5"><li>When you finish your work on the other computer, push your work to github to update repository.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git add . </span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><ol start="6"><li>remember to pull your Hexo repo every time when you want to write a blog and publish it to github,</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure><h2 id="Customize-social-icon-in-sidebar"><a href="#Customize-social-icon-in-sidebar" class="headerlink" title="Customize  social icon in sidebar"></a>Customize  social icon in sidebar</h2><p>Open <code>themes/next/_config.yml</code>, find <code>social_icons</code>, and set <code>enable</code> to <code>true</code>. Find your favorite icon in <a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">library</a> and paste its name after your link. </p><h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a><a href="https://hexo-guide.readthedocs.io/zh_CN/latest/theme/[NexT]配置MathJax.html" target="_blank" rel="noopener">MathJax</a></h2><p>There are two steps in <code>NexT</code> theme to support math formulas.</p><h3 id="1-Enable-NexT-internal-math-formula-rendering-engine"><a href="#1-Enable-NexT-internal-math-formula-rendering-engine" class="headerlink" title="1. Enable NexT internal math formula rendering engine."></a>1. Enable <code>NexT</code> internal math formula rendering engine.</h3><p>Open <code>themes/next/_config.yml</code>, find <code>math</code> keyword, change <code>enable: false</code> to <code>enable: true</code>. Set <code>per_page</code> to <code>true</code> and add <code>mathjax: true</code> to the articles you need the rendering configurations.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &lt;postname&gt;</span><br><span class="line">date: &lt;datatime&gt;</span><br><span class="line"></span><br><span class="line">mathjax: true</span><br></pre></td></tr></table></figure><h3 id="2-Enable-Hexo-rendering-engine"><a href="#2-Enable-Hexo-rendering-engine" class="headerlink" title="2. Enable Hexo rendering engine."></a>2. Enable <code>Hexo</code> rendering engine.</h3><p>Go to the root directory of your blog. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>Note: it is <strong>renderer</strong> not <strong>render</strong>!</p><p>If you install <code>hexo-renderer-pandoc --save</code>, you probably will counter following error when <code>hexo s</code> to view your blog. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: pandoc exited with code 9: pandoc: Unknown extension: smart</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Useful-tips-writing-your-blog"><a href="#Useful-tips-writing-your-blog" class="headerlink" title="Useful tips writing your blog"></a>Useful tips writing your blog</h2><h3 id="1-Using-special-characters-in-your-title"><a href="#1-Using-special-characters-in-your-title" class="headerlink" title="1. Using special characters in your title"></a>1. Using special characters in your title</h3><p>In YAML grammar, it is not allowed to use special character such as <code>:</code> or <code>[]</code>. There are two solutions in general.</p><ul><li>use <code>-</code> to replace your special characters</li><li>define all your string using <code>&#39;</code> or <code>&quot;</code>, eg, <code>&quot;title: this is my title&quot;</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my first blog! It took me a while to struggle through the setting process of my blog. Thus, I want to share my experience here to help people with same wish creating their own blog with github pages and hexo. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
